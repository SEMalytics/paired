#!/bin/bash
# PAIRED Bridge Monitor - Real-time Agent Message Display
# Shows live bridge communication and agent responses

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
BRIDGE_URL="http://localhost:7890"
BRIDGE_LOG="$HOME/.paired/cascade_bridge/bridge.log"
AGENT_LOGS_DIR="$HOME/.paired/logs"

echo -e "${BLUE}üåä PAIRED Bridge Monitor${NC}"
echo "========================="
echo -e "${CYAN}Monitoring bridge at $BRIDGE_URL${NC}"
echo -e "${CYAN}Press Ctrl+C to stop${NC}"
echo ""

# Function to check bridge status
check_bridge_status() {
    if curl -s "$BRIDGE_URL/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Bridge Service - Running (Port: 7890)${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Bridge Service - Not accessible${NC}"
        return 1
    fi
}

# Function to show agent status
show_agent_status() {
    echo -e "${BLUE}üìä Agent Status:${NC}"
    local running_count=0
    local agents=("alex" "sherlock" "edison" "leonardo" "maya" "vince" "marie")
    
    for agent_id in "${agents[@]}"; do
        local pid_file="$HOME/.paired/pids/agent_${agent_id}.pid"
        if [ -f "$pid_file" ]; then
            local pid=$(cat "$pid_file")
            if ps -p "$pid" > /dev/null 2>&1; then
                echo -e "  ${GREEN}‚úÖ $agent_id${NC} (PID: $pid)"
                running_count=$((running_count + 1))
            else
                echo -e "  ${RED}‚ùå $agent_id${NC} - Stopped"
            fi
        else
            echo -e "  ${RED}‚ùå $agent_id${NC} - Not started"
        fi
    done
    
    echo -e "${CYAN}Summary: $running_count/7 agents running${NC}"
    echo ""
}

# Function to find bridge log file
find_bridge_log() {
    local possible_logs=(
        "$HOME/.paired/logs/bridge.log"
        "$HOME/.paired/bridge.log"
    )
    
    for log_file in "${possible_logs[@]}"; do
        if [ -f "$log_file" ]; then
            echo "$log_file"
            return 0
        fi
    done
    
    return 1
}

# Function to format log line with colors and emojis
format_log_line() {
    local line="$1"
    local timestamp=$(date '+%H:%M:%S')
    
    if [[ "$line" == *"ERROR"* ]]; then
        echo -e "${RED}[$timestamp] $line${NC}"
    elif [[ "$line" == *"WARN"* ]]; then
        echo -e "${YELLOW}[$timestamp] $line${NC}"
    elif [[ "$line" == *"INFO"* ]]; then
        echo -e "${CYAN}[$timestamp] $line${NC}"
    elif [[ "$line" == *"Alex"* ]]; then
        echo -e "${MAGENTA}[$timestamp] üëë $line${NC}"
    elif [[ "$line" == *"Sherlock"* ]]; then
        echo -e "${BLUE}[$timestamp] üïµÔ∏è $line${NC}"
    elif [[ "$line" == *"Edison"* ]]; then
        echo -e "${YELLOW}[$timestamp] ‚ö° $line${NC}"
    elif [[ "$line" == *"Leonardo"* ]]; then
        echo -e "${CYAN}[$timestamp] üèõÔ∏è $line${NC}"
    elif [[ "$line" == *"Maya"* ]]; then
        echo -e "${MAGENTA}[$timestamp] üé® $line${NC}"
    elif [[ "$line" == *"Vince"* ]]; then
        echo -e "${GREEN}[$timestamp] üèà $line${NC}"
    elif [[ "$line" == *"Marie"* ]]; then
        echo -e "${BLUE}[$timestamp] üî¨ $line${NC}"
    else
        echo "[$timestamp] $line"
    fi
}

# Function to monitor with periodic status updates
monitor_with_updates() {
    local log_file
    log_file=$(find_bridge_log)
    
    if [ -z "$log_file" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No bridge log file found${NC}"
        echo -e "${CYAN}üí° Checking common locations...${NC}"
        echo -e "${CYAN}   - $HOME/.paired/cascade_bridge/bridge.log${NC}"
        echo -e "${CYAN}   - $HOME/.paired/logs/bridge.log${NC}"
        echo -e "${CYAN}   - $HOME/.paired/bridge.log${NC}"
        echo ""
        echo -e "${YELLOW}üì° Monitoring bridge communication via API calls...${NC}"
        
        # Monitor via API calls if no log file
        while true; do
            clear
            echo -e "${BLUE}üåä PAIRED Bridge Monitor - Live Updates${NC}"
            echo "========================="
            echo -e "${CYAN}Monitoring bridge at $BRIDGE_URL${NC}"
            echo -e "${CYAN}Press Ctrl+C to stop${NC}"
            echo ""
            
            check_bridge_status
            echo ""
            show_agent_status
            test_bridge_communication
            
            echo -e "${YELLOW}üì° Next update in 10 seconds...${NC}"
            sleep 10
        done
        return
    fi
    
    echo -e "${GREEN}‚úÖ Found bridge log: $log_file${NC}"
    echo ""
    
    # Show initial status
    echo -e "${YELLOW}üìã Bridge Log (last 10 lines):${NC}"
    tail -10 "$log_file" | while IFS= read -r line; do
        format_log_line "$line"
    done
    echo ""
    
    echo -e "${YELLOW}üì° Live Bridge Messages & Status Updates:${NC}"
    echo -e "${CYAN}(Following bridge log in real-time with periodic status refresh...)${NC}"
    echo ""
    
    # Start background process for periodic status updates
    (
        while true; do
            sleep 30  # Update status every 30 seconds
            echo ""
            echo -e "${BLUE}üîÑ [$(date '+%H:%M:%S')] Status Update:${NC}"
            show_agent_status | sed 's/^/  /'
            echo ""
        done
    ) &
    local status_pid=$!
    
    # Follow the log file in real-time
    tail -f "$log_file" | while IFS= read -r line; do
        format_log_line "$line"
    done
    
    # Clean up background process
    kill $status_pid 2>/dev/null || true
}

# Function to monitor bridge log in real-time (legacy function for compatibility)
monitor_bridge_log() {
    monitor_with_updates
}

# Function to test bridge communication
test_bridge_communication() {
    echo -e "${YELLOW}üß™ Testing Bridge Communication:${NC}"
    
    # Test health endpoint
    if curl -s "$BRIDGE_URL/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Health endpoint responding${NC}"
    else
        echo -e "${RED}‚ùå Health endpoint not responding${NC}"
        return 1
    fi
    
    # Test cascade-intercept endpoint with a simple message
    local test_response=$(node -e "
        const http = require('http');
        const data = JSON.stringify({
            instanceId: 'monitor-test',
            message: 'Bridge monitor test - please respond with status',
            type: 'system_check',
            projectPath: process.cwd()
        });

        const req = http.request({
            hostname: 'localhost',
            port: 7890,
            path: '/cascade-intercept',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': data.length
            },
            timeout: 5000
        }, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                console.log('Response received:', body.substring(0, 200));
            });
        });

        req.on('timeout', () => {
            console.log('Request timed out');
            req.destroy();
        });

        req.on('error', (err) => console.error('Error:', err.message));
        req.write(data);
        req.end();
    " 2>/dev/null)
    
    if [ -n "$test_response" ]; then
        echo -e "${GREEN}‚úÖ Bridge communication test successful${NC}"
        echo -e "${CYAN}Response: $test_response${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Bridge communication test inconclusive${NC}"
    fi
    
    echo ""
}

# Main execution
case "${1:-monitor}" in
    "monitor" | "")
        check_bridge_status
        echo ""
        show_agent_status
        test_bridge_communication
        monitor_bridge_log
        ;;
    "status")
        check_bridge_status
        echo ""
        show_agent_status
        ;;
    "test")
        test_bridge_communication
        ;;
    "logs")
        if [ -f "$BRIDGE_LOG" ]; then
            echo -e "${YELLOW}üìã Bridge Log (last 50 lines):${NC}"
            tail -50 "$BRIDGE_LOG"
        else
            echo -e "${RED}‚ùå Bridge log not found at $BRIDGE_LOG${NC}"
        fi
        ;;
    "--help" | "-h")
        echo "PAIRED Bridge Monitor"
        echo ""
        echo "Usage:"
        echo "  $0 [monitor]   - Live monitoring with real-time log following (default)"
        echo "  $0 status      - Show current bridge and agent status"
        echo "  $0 test        - Test bridge communication"
        echo "  $0 logs        - Show recent bridge log entries"
        echo "  $0 --help      - Show this help"
        echo ""
        echo "Features:"
        echo "  ‚Ä¢ Real-time bridge log monitoring with color coding"
        echo "  ‚Ä¢ Agent status checking with PID tracking"
        echo "  ‚Ä¢ Bridge health and communication testing"
        echo "  ‚Ä¢ Agent-specific message highlighting with emojis"
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo "Use --help for usage information"
        exit 1
        ;;
esac
