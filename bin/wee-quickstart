#!/bin/bash

# WEE Quick Start - Zero Configuration Required
# Fixes Maya's identified issue: No guidance for initial setup

set -e  # Exit on any error

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}🎯 WEE Quick Start - Zero Configuration Required${NC}"
echo -e "${BLUE}================================================${NC}"
echo ""

# Function to print step
print_step() {
    echo -e "${CYAN}$1${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "package.json" ] || ! (grep -q "windsurf-evolutionary-ecosystem" package.json 2>/dev/null || grep -q "knowledgeforge" package.json 2>/dev/null); then
    print_error "Not in WEE directory. Please run from the WEE root directory."
    exit 1
fi

# Step 1: Auto-detect project type
print_step "📊 Step 1: Analyzing environment..."
PROJECT_PATH=${1:-$(pwd)}
echo "   Project path: $PROJECT_PATH"

# Detect project type based on files
if [ -f "$PROJECT_PATH/Cargo.toml" ]; then
    PROJECT_TYPE="rust"
elif [ -f "$PROJECT_PATH/package.json" ]; then
    PROJECT_TYPE="javascript"
elif [ -f "$PROJECT_PATH/requirements.txt" ] || [ -f "$PROJECT_PATH/setup.py" ]; then
    PROJECT_TYPE="python"
elif [ -f "$PROJECT_PATH/pom.xml" ]; then
    PROJECT_TYPE="java"
else
    PROJECT_TYPE="generic"
fi

print_success "Detected: $PROJECT_TYPE project"

# Step 2: Install dependencies
print_step "📦 Step 2: Installing dependencies..."
if [ -f "scripts/install-dependencies.sh" ]; then
    chmod +x scripts/install-dependencies.sh
    ./scripts/install-dependencies.sh
else
    print_warning "Dependency script not found, running npm install..."
    npm install
fi

# Step 3: Validate installation
print_step "🧪 Step 3: Validating installation..."
if [ -f "scripts/validate-agents.sh" ]; then
    chmod +x scripts/validate-agents.sh
    if ./scripts/validate-agents.sh; then
        print_success "All agents validated successfully"
    else
        print_warning "Some validation issues found, but continuing..."
    fi
else
    print_warning "Validation script not found, skipping validation"
fi

# Step 4: Run health check
print_step "🏥 Step 4: Running health check..."
if node core/health_checker.js; then
    print_success "Health check passed"
else
    print_warning "Health check found issues, but WEE may still be functional"
fi

# Step 5: Setup Windsurf integration (if in .wee directory)
if [[ "$(basename "$(pwd)")" == ".wee" ]]; then
    print_step "🔧 Step 5: Setting up Windsurf integration..."
    
    # Copy .windsurffile to project root (parent directory)
    if [ -f ".windsurffile" ]; then
        cp .windsurffile ../.windsurffile
        print_success "Windsurf workflows configured in project root"
    fi
    
    # Copy .windsurfrules to project root if it exists
    if [ -f ".windsurfrules" ]; then
        cp .windsurfrules ../.windsurfrules
        print_success "Windsurf rules configured in project root"
    fi
    
    print_success "WEE integrated with Windsurf (hidden in .wee directory)"
else
    print_step "📁 Step 5: Standard installation detected"
fi

# Step 6: Create output directories
print_step "📁 Step 6: Preparing output directories..."
mkdir -p diagrams logs analysis wee_analysis
print_success "Output directories ready"

# Step 7: Run sample analysis
print_step "🔍 Step 7: Running sample analysis..."
echo "   Generating logic diagrams for current project..."

if npm run logic-diagram -- --format xmind --focus all; then
    print_success "Sample analysis completed"
    
    # Show results
    echo ""
    echo -e "${BLUE}📊 Generated Files:${NC}"
    if [ -d "diagrams" ]; then
        find diagrams -name "*.xmind.xml" -exec echo "   • {}" \; 2>/dev/null || true
        find diagrams -name "*.md" -exec echo "   • {}" \; 2>/dev/null || true
    fi
else
    print_warning "Sample analysis had issues, but WEE is installed"
fi

# Final success message
echo ""
echo -e "${GREEN}🎉 WEE Quick Start Complete!${NC}"
echo -e "${GREEN}=============================${NC}"
echo ""
echo -e "${BLUE}🚀 WEE is ready to use! Try these commands:${NC}"
echo ""
echo "   📊 Generate logic diagrams:"
echo "      npm run logic-diagram"
echo "      npm run logic-diagram -- --format all"
echo ""
echo "   🏥 Check system health:"
echo "      npm run health"
echo ""
echo "   🧪 Validate agents:"
echo "      npm run validate"
echo ""
echo "   🔧 Get help:"
echo "      node src/cli/wee_cli.js --help"
echo ""
echo -e "${CYAN}📚 Documentation:${NC}"
echo "   • Quick reference: ./docs/quick-start.md"
echo "   • Troubleshooting: ./docs/troubleshooting.md"
echo "   • Agent reference: ./docs/agent-reference.md"
echo ""

# Project-specific suggestions
case $PROJECT_TYPE in
    "rust")
        echo -e "${YELLOW}💡 Rust Project Detected:${NC}"
        echo "   • Focus on performance and safety analysis"
        echo "   • Try: npm run logic-diagram -- --focus processes"
        ;;
    "javascript")
        echo -e "${YELLOW}💡 JavaScript Project Detected:${NC}"
        echo "   • Focus on async patterns and complexity"
        echo "   • Try: npm run logic-diagram -- --focus flows"
        ;;
    "python")
        echo -e "${YELLOW}💡 Python Project Detected:${NC}"
        echo "   • Focus on data flow and algorithms"
        echo "   • Try: npm run logic-diagram -- --focus decisions"
        ;;
esac

echo ""
echo -e "${GREEN}Happy analyzing! 🚀${NC}"
