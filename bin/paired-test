#!/usr/bin/env node
// PAIRED System Test Suite
// Comprehensive testing of all PAIRED components

const WebSocket = require('ws');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// Colors for output
const colors = {
    RED: '\x1b[0;31m',
    GREEN: '\x1b[0;32m',
    YELLOW: '\x1b[1;33m',
    BLUE: '\x1b[0;34m',
    CYAN: '\x1b[0;36m',
    NC: '\x1b[0m'
};

console.log(`${colors.BLUE}🧪 PAIRED System Test Suite${colors.NC}`);
console.log("==========================");
console.log("");

let testsTotal = 5;
let testsPassed = 0;

// Test bridge connectivity
async function testBridge() {
    console.log(`${colors.BLUE}🌉 Testing Bridge Service...${colors.NC}`);
    
    return new Promise((resolve) => {
        const ws = new WebSocket('ws://localhost:7890');
        
        ws.on('open', () => {
            console.log(`  ${colors.GREEN}✅ Bridge WebSocket connectivity${colors.NC}`);
            ws.close();
            resolve(true);
        });
        
        ws.on('error', () => {
            console.log(`  ${colors.RED}❌ Bridge WebSocket connectivity${colors.NC}`);
            resolve(false);
        });
        
        setTimeout(() => {
            console.log(`  ${colors.RED}❌ Bridge WebSocket connectivity (timeout)${colors.NC}`);
            ws.close();
            resolve(false);
        }, 3000);
    });
}

// Test agent system
async function testAgents() {
    console.log(`${colors.BLUE}🤖 Testing Agent System...${colors.NC}`);
    
    try {
        // Test agent factory
        const AgentFactory = require('../core/agents/agent_factory');
        const factory = new AgentFactory();
        console.log(`  ${colors.GREEN}✅ Agent factory loading${colors.NC}`);
        
        // Test agent configs
        const configDir = path.join(process.cwd(), 'config', 'agents');
        if (fs.existsSync(configDir)) {
            const configs = fs.readdirSync(configDir).filter(f => f.endsWith('.yml'));
            if (configs.length === 7) {
                console.log(`  ${colors.GREEN}✅ Agent configurations (7/7)${colors.NC}`);
                return true;
            } else {
                console.log(`  ${colors.RED}❌ Agent configurations (${configs.length}/7)${colors.NC}`);
                return false;
            }
        } else {
            console.log(`  ${colors.RED}❌ Agent configurations directory missing${colors.NC}`);
            return false;
        }
    } catch (error) {
        console.log(`  ${colors.RED}❌ Agent system loading: ${error.message}${colors.NC}`);
        return false;
    }
}

// Test memory system
async function testMemory() {
    console.log(`${colors.BLUE}🧠 Testing Memory System...${colors.NC}`);
    
    try {
        // Test memory system
        const BaseAgentMemory = require('../core/agents/base_agent_memory');
        const memory = new BaseAgentMemory('test-agent', {});
        console.log(`  ${colors.GREEN}✅ Memory system loading${colors.NC}`);
        
        // Test memory directories
        const localMemory = fs.existsSync('.paired/memory');
        const globalMemory = fs.existsSync(path.join(process.env.HOME, '.paired', 'memory'));
        
        if (localMemory || globalMemory) {
            console.log(`  ${colors.GREEN}✅ Memory directories present${colors.NC}`);
        } else {
            console.log(`  ${colors.YELLOW}⚠️ Memory directories missing${colors.NC}`);
        }
        
        return true;
    } catch (error) {
        console.log(`  ${colors.RED}❌ Memory system loading: ${error.message}${colors.NC}`);
        return false;
    }
}

// Test CLI system
async function testCLI() {
    console.log(`${colors.BLUE}⚙️ Testing CLI System...${colors.NC}`);
    
    try {
        // Test CLI registry
        const AgentCLIRegistry = require('../core/agent_cli_registry');
        const registry = new AgentCLIRegistry();
        console.log(`  ${colors.GREEN}✅ CLI registry loading${colors.NC}`);
        
        // Test knowledge system
        const PersistentProjectKnowledge = require('../core/persistent_project_knowledge');
        const knowledge = new PersistentProjectKnowledge();
        console.log(`  ${colors.GREEN}✅ Knowledge system loading${colors.NC}`);
        
        return true;
    } catch (error) {
        console.log(`  ${colors.RED}❌ CLI system loading: ${error.message}${colors.NC}`);
        return false;
    }
}

// Test configuration
async function testConfig() {
    console.log(`${colors.BLUE}📋 Testing Configuration...${colors.NC}`);
    
    const cascadeConfig = fs.existsSync('.cascade_config.js');
    const windsurfRules = fs.existsSync('.pairedrules');
    
    if (cascadeConfig) {
        console.log(`  ${colors.GREEN}✅ CASCADE config present${colors.NC}`);
    } else {
        console.log(`  ${colors.YELLOW}⚠️ CASCADE config missing${colors.NC}`);
    }
    
    if (windsurfRules) {
        console.log(`  ${colors.GREEN}✅ Windsurf rules present${colors.NC}`);
    } else {
        console.log(`  ${colors.YELLOW}⚠️ Windsurf rules missing${colors.NC}`);
    }
    
    return cascadeConfig || windsurfRules;
}

// Main test execution
async function runTests() {
    console.log(`${colors.CYAN}Running comprehensive system tests...${colors.NC}`);
    console.log("");
    
    if (await testBridge()) testsPassed++;
    console.log("");
    
    if (await testAgents()) testsPassed++;
    console.log("");
    
    if (await testMemory()) testsPassed++;
    console.log("");
    
    if (await testCLI()) testsPassed++;
    console.log("");
    
    if (await testConfig()) testsPassed++;
    console.log("");
    
    // Summary
    console.log(`${colors.BLUE}📊 Test Results Summary${colors.NC}`);
    console.log("======================");
    
    if (testsPassed === testsTotal) {
        console.log(`${colors.GREEN}✅ All tests passed (${testsPassed}/${testsTotal})${colors.NC}`);
        console.log(`${colors.GREEN}🎉 PAIRED system is fully functional!${colors.NC}`);
        process.exit(0);
    } else {
        console.log(`${colors.YELLOW}⚠️ Some tests failed (${testsPassed}/${testsTotal})${colors.NC}`);
        console.log(`${colors.YELLOW}💡 Run 'paired-doctor' for detailed diagnostics${colors.NC}`);
        process.exit(1);
    }
}

runTests().catch(error => {
    console.error(`${colors.RED}❌ Test suite error: ${error.message}${colors.NC}`);
    process.exit(1);
});
